@inject IJSRuntime JsRuntime
@inject CourseService Service
@implements IDisposable

<div class="diagram-container">
    <!-- show the diagram -->
    <CascadingValue Value="Service.Diagram">
        <DiagramCanvas></DiagramCanvas>
    </CascadingValue>
</div>

@* <div class="card position-absolute bottom-0 end-0" style="width: 20%;">
    <div class="card-body">
        <p class="card-text">
            H x W: @windowHeight x @windowWidth
        </p>
    </div>
</div> *@

<style>
    .diagram-container {
        width: 100%;
        height: 100%;
        border: 1px solid;
    }
    .diagram-node {
        position: fixed;
        z-index: 50;
    }
</style>

@code 
{
    private IJSObjectReference? jsModule { get; set; }
    private int windowHeight, windowWidth;
    private const int xInterval = 200, yInterval = 70;

    private class WindowDimensions
    {
        public int Width { get; set; }
        public int Height { get; set; }
    }

    protected override void OnInitialized()
    {
        base.OnInitialized();

        // Service.OnChange += StateHasChanged;
        Service.OnCenterChange += StateHasChanged;
    }

    public void Dispose()
    {
        // Service.OnChange -= StateHasChanged;
        Service.OnCenterChange -= StateHasChanged;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);

        if (firstRender)
        {
            jsModule = await JsRuntime.InvokeAsync<IJSObjectReference>("import", "./scripts/getWindowSize.js");
        }
        if (jsModule is null)
        {
            return;
        }
        var dimensions = await jsModule.InvokeAsync<WindowDimensions>("getWindowSize");
        windowWidth = dimensions.Width;
        windowHeight = dimensions.Height;

        if (windowWidth > 0 && windowHeight > 0) {
            Service.InitializeDiagram(windowWidth / 2, windowHeight / 2);
        }
        

    }

    // protected override void OnAfterRender(bool firstRender)
    // {
    //     base.OnAfterRender(firstRender);
    // }

    

}

    